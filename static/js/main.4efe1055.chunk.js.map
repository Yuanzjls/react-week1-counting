{"version":3,"sources":["components/Button/Button.jsx","components/Text/Text.jsx","App.js","index.js"],"names":["useStyles","createUseStyles","myButton","color","background","myResetButton","Button","props","classes","classButton","btnType","type","className","disabled","btnEnable","onClick","btnFunc","accessKey","btnKey","btnText","Text","displayWarning","currentNumber","maxCapacity","App","useState","setNumber","plusEnable","minusEnable","useEffect","alert","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2LAGMA,EAAYC,YAAgB,CAChCC,SAAS,CACPC,MAAM,QACNC,WAAW,QACX,UAAU,CACNA,WAAW,SAGjBC,cAAc,CACZF,MAAM,WACNC,WAAW,QACX,UAAU,CACNA,WAAW,WAgBJE,MAXf,SAAgBC,GACZ,IAAMC,EAAUR,IACVS,EAA+B,UAAhBF,EAAMG,QAAmBF,EAAQN,SAASM,EAAQH,cAEvE,OACI,4BAAQM,KAAK,SACXC,UAAWH,EAAaI,SAAUN,EAAMO,UAAWC,QAASR,EAAMS,QAASC,UAAWV,EAAMW,QAC9F,8BAAOX,EAAMY,WCXNC,MAdf,SAAcb,GAGV,IAAMc,EAAed,EAAMe,eAAef,EAAMgB,YAAa,2BAA2B,UAExF,OACI,yBAAKX,UAAU,aACX,wCAAcL,EAAMgB,aAChB,uBAAGX,UAAU,SAASL,EAAMe,eAChC,4BAAKD,KCiCFG,MAvCf,SAAajB,GAAQ,IAAD,EACiBkB,mBAFjB,GACA,mBACXH,EADW,KACII,EADJ,KAEZC,EAAaL,EAAcf,EAAMgB,YACjCK,EAAcN,EAAc,EAsBlC,OAJAO,qBAAU,WACHF,GAAYG,MAAM,8BACtB,CAACH,IAGF,yBAAKf,UAAU,qBACb,kBAAC,EAAD,CAAQF,QAAQ,QAAQS,QAAQ,QAAQD,OAAO,IAAIF,QAVvD,WACEU,EAnBgB,MA6Bd,kBAAC,EAAD,CAAMH,YAAahB,EAAMgB,YAAaD,cAAeA,IACrD,yBAAKV,UAAU,qCACb,kBAAC,EAAD,CAAQO,QAAQ,IAAIH,QAzB1B,WACMW,GACFD,EAAUJ,EAAc,IAuBgBR,WAAWa,EAAuBT,OAAO,MAC/E,kBAAC,EAAD,CAAQC,QAAQ,IAAIH,QApB1B,WACMY,GACFF,EAAUJ,EAAc,IAkBiBR,WAAWc,EAAwBV,OAAO,SC7BzFa,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKV,YAAa,OAEpBW,SAASC,eAAe,U","file":"static/js/main.4efe1055.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\";\r\nimport {createUseStyles} from 'react-jss'\r\n\r\nconst useStyles = createUseStyles({\r\n  myButton:{\r\n    color:'black',\r\n    background:'white',\r\n    \"&:focus\":{      \r\n        background:'gray',      \r\n    }\r\n  },\r\n  myResetButton:{\r\n    color:'#4d4d4d;',\r\n    background:'white',\r\n    \"&:focus\":{      \r\n        background:'gray',      \r\n    }\r\n  }\r\n});\r\n\r\nfunction Button(props){\r\n    const classes = useStyles();\r\n    const classButton = (props.btnType!==\"reset\")?classes.myButton:classes.myResetButton;\r\n\r\n    return (\r\n        <button type=\"button\"\r\n          className={classButton} disabled={props.btnEnable} onClick={props.btnFunc} accessKey={props.btnKey}>\r\n        <span>{props.btnText}</span>\r\n        </button>\r\n    );\r\n}\r\nexport default Button;\r\n","import React, {useState, useEffect} from \"react\";\r\n\r\nfunction Text(props){\r\n\r\n    \r\n    const displayWarning=props.currentNumber>=props.maxCapacity? \"Max capacity is reached!\":\"Welcome\"; // display message depends on wether reaches capacity or not.\r\n\r\n    return (\r\n        <div className=\"label__lg\">\r\n            <h2>Capacity:{props.maxCapacity}</h2>\r\n                <p className=\"num-p\">{props.currentNumber}</p>\r\n            <h2>{displayWarning}</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Text;\r\n","import React, { useState ,useEffect} from \"react\";\r\nimport Button from \"./components/Button/Button\";\r\nimport Text from \"./components/Text/Text\"\r\n\r\nconst initialNumber=0; // Set initial amount of people as zero\r\nfunction App(props) {\r\n  const [currentNumber, setNumber] = useState(initialNumber); \r\n  const plusEnable = currentNumber<props.maxCapacity; // check if the current number is less than capacity.\r\n  const minusEnable = currentNumber>0; // check if the current number is greater than 0\r\n\r\n  function numPlus(){\r\n    if (plusEnable) { // condition satisfies, add one to current number\r\n      setNumber(currentNumber+1);\r\n    }\r\n  }\r\n  \r\n  function numMinus(){\r\n    if (minusEnable) { // condition satisfies, minus one to current number\r\n      setNumber(currentNumber-1);\r\n    }\r\n  }\r\n  \r\n  function resetNumber(){\r\n    setNumber(initialNumber); // reset current to initial number.\r\n  }\r\n\r\n  useEffect(()=>{\r\n    if (!plusEnable) alert(\"Max capacity is reached!\");\r\n  }, [plusEnable]);  // Is reached maximum, alert.\r\n  \r\n  return (    \r\n    <div className=\"count stack-large\">\r\n      <Button btnType=\"reset\" btnText=\"Reset\" btnKey=\"r\" btnFunc={resetNumber}/>\r\n      <Text maxCapacity={props.maxCapacity} currentNumber={currentNumber}/>\r\n      <div className=\"filters btn-group stack-exception\">\r\n        <Button btnText=\"+\" btnFunc={numPlus} btnEnable={plusEnable?false:true} btnKey=\"+\"/>\r\n        <Button btnText=\"-\" btnFunc={numMinus} btnEnable={minusEnable?false:true} btnKey=\"-\"/>        \r\n      </div>\r\n      \r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\n// Set max capacity as 100\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App maxCapacity={100} />  \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}